provider "aws" {
  region  = "${var.aws_region}"
  profile = "${var.aws_profile}"
}

#IAM

#S3 access iam instance profile
resource "aws_iam_instance_profile" "s3_access_profile" {
  name = "s3_access_profile"
  role = "${aws_iam_role.s3_access_role.name}"
}


resource "aws_iam_role_policy" "s3_access_policy" {
  name   = "s3_access_policy"
  role   = "${aws_iam_role.s3_access_role.id}"
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "*"
        }
    ]
}
EOF
}


resource "aws_iam_role" "s3_access_role" {
  name               = "s3_access_role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}

EOF
}


resource "aws_vpc" "vpc" {
  enable_dns_hostnames = "true"
  enable_dns_support   = "true"
  cidr_block           = "${var.cidr_for_vpc}"
  tags = {
    Name = "aws vpc"
  }

}

resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name = "internet gateway"
  }
}


resource "aws_route_table" "public_route_table" {
  vpc_id = "${aws_vpc.vpc.id}"
  route {
    cidr_block = "0.0.0.0/15"
    gateway_id = "${aws_internet_gateway.internet_gateway.id}"
  }
  tags = {
    Name = "Public route table"
  }

}

resource "aws_default_route_table" "private_route_table" {
  default_route_table_id = "${aws_vpc.vpc.default_route_table_id}"
  tags = {
    Name = "Private route table"
  }
}


resource "aws_subnet" "public_subnet1" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  cidr_block              = "${var.cidrforsubnet["public1"]}"
  map_public_ip_on_launch = "true"
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"
  tags = {
 Name = "public_subnet1"
  }
}

resource "aws_subnet" "private_subnet1" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  cidr_block              = "${var.cidrforsubnet["private1"]}"
  map_public_ip_on_launch = "false"
  availability_zone       = "${data.aws_availability_zones.available.names[1]}"
  tags = {
    Name = "private_subnet1"
  }
}

resource "aws_subnet" "rds_subnet1" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  cidr_block              = "${var.cidrforsubnet["rds1"]}"
  map_public_ip_on_launch = "false"
  availability_zone       = "${data.aws_availability_zones.available.names[0]}"
  tags = {
    Name = "rds_subnet1"
  }
}

resource "aws_subnet" "rds_subnet2" {
  vpc_id                  = "${aws_vpc.vpc.id}"
  cidr_block              = "${var.cidrforsubnet["rds2"]}"
  map_public_ip_on_launch = "false"
  availability_zone       = "${data.aws_availability_zones.available.names[1]}"
  tags = {
    Name = "rds_subnet2"
  }
}

resource "aws_db_subnet_group" "allrdssubnetsgroup" {
  subnet_ids = ["${aws_subnet.rds_subnet1.id}", "${aws_subnet.rds_subnet2.id}"]
  name       = "allrdssubnetsgroup"
  tags = {
    Name = "rdssubnetsgroup"
  }
}

resource "aws_route_table_association" "public_subnet_routetable_associate" {
  subnet_id      = "${aws_subnet.public_subnet1.id}"
  route_table_id = "${aws_route_table.public_route_table.id}"
}

resource "aws_route_table_association" "private_subnet_routetable_associate" {
  subnet_id      = "${aws_subnet.private_subnet1.id}"
  route_table_id = "${aws_default_route_table.private_route_table.id}"
}


resource "aws_vpc_endpoint" "vpcasendfors3" {
  vpc_id          = "${aws_vpc.vpc.id}"
  service_name    = "com.amazonaws.${var.aws_region}.s3"
  route_table_ids = ["${aws_vpc.vpc.main_route_table_id}", "${aws_route_table.public_route_table.id}"]
  policy          = <<POLICY
  {
   "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Principal": "*",
      "Resource": "*"
    }
   ]
  }
 POLICY
}


resource "random_id" "randomidfors3" {
  byte_length = 2
}

resource "aws_s3_bucket" "s3bucket" {
  bucket        = "${random_id.randomidfors3.dec}-${var.domainfors3}"
  acl           = "private"
  force_destroy = "true"
  tags = {
    Name = "s3 bucket for testing codes"
  }
}


resource "aws_db_instance" "mysqldbcreation" {
  allocated_storage      = "10"
  instance_class         = "${var.serverwheredbispresent}"
  username               = "dbuser"
  password               = "dbpassword"
  engine                 = "mysql"
  engine_version         = "5.6.27"
  db_subnet_group_name   = "${aws_db_subnet_group.allrdssubnetsgroup.name}"
  skip_final_snapshot    = "true"
 vpc_security_group_ids = ["${aws_security_group.rds_sg.id}"]
}


resource "aws_security_group" "dev_sg" {
  name        = "dev sg"
  description = "dev instance SG . Need to open port 22 and 80 from local ip"
  vpc_id      = "${aws_vpc.vpc.id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["${var.localip}"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["${var.localip}"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "public_sg" {
  name        = "public sg"
  description = "public SG . all ports open for all"
  vpc_id      = "${aws_vpc.vpc.id}"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
 }
}

resource "aws_security_group" "private_sg" {
  name        = "private sg"
  description = "private SG . open to all ports with vpc"
  vpc_id      = "${aws_vpc.vpc.id}"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["${aws_vpc.vpc.cidr_block}"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "rds_sg" {
  name        = "rds sg"
  description = "rds SG . open from public private dev SGs' t0 db port 3306"
  vpc_id      = "${aws_vpc.vpc.id}"

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = ["${aws_security_group.dev_sg.id}", "${aws_security_group.public_sg.id}", "${aws_security_group.private_sg.id}"]
  }
}

resource aws_key_pair "keyfordev" {
  key_name   = "kryptonite"
  public_key = "${file(var.public_key_path)}"
}

resource "aws_instance" "dev_instance" {
  instance_type          = "t2.micro"
  subnet_id              = "${aws_subnet.public_subnet1.id}"
  vpc_security_group_ids = ["${aws_security_group.dev_sg.id}"]
  key_name               = "${aws_key_pair.keyfordev.id}"
  ami                    = "${var.aminame}"
 iam_instance_profile   = "${aws_iam_instance_profile.s3_access_profile.id}"
  tags = {
    Name = "dev instance"
  }
  provisioner "local-exec" {
    command = <<EOD
    cat <<EOF > aws_hosts
    [dev]
    ${aws_instance.dev_instance.public_ip}
    [dev:vars]
    s3code="${aws_s3_bucket.s3bucket.bucket}"
    domain = "${var.domainfors3}"
    EOF
    EOD
  }

  provisioner "local-exec" {
    command = "aws ec2 wait instance-status-ok --instance-ids ${aws_instance.dev_instance.id} --profile ${var.aws_profile} && ansible-playbook -i aws_hosts w
ordpress.yml"
  }


}

resource "aws_elb" "elb" {
  name            = "elb"
  subnets         = ["${aws_subnet.public_subnet1.id}"]
  security_groups = ["${aws_security_group.public_sg.id}"]
  listener {
    instance_protocol = "http"
    instance_port     = "80"
    lb_protocol       = "http"
    lb_port           = "80"
  }

  health_check {
    healthy_threshold   = "2"
    unhealthy_threshold = "2"
    target              = "TCP:80"
    timeout             = "3"
    interval            = "30"
  }

  idle_timeout                = "400"
  cross_zone_load_balancing   = "true"
  connection_draining         = true
  connection_draining_timeout = "400"

  tags = {
    Name = "elb"

  }

}


resource "aws_ami_from_instance" "goldenami" {
  source_instance_id = "${aws_instance.dev_instance.id}"
  name               = "Golden-ami-dev-instance-${random_id.randomidfors3.dec}"
  provisioner "local-exec" {
    command = <<EOT
cat <<EOF> userdata
#!/bin/bash
/usr/bin/aws s3 sync s3://{aws_s3_bucket.s3bucket.bucket} /var/www/html
/bin/touch /var/spool/cron/root
sudo /bin/echo '*/5 * * * *  aws s3 sync s3://{aws_s3_bucket.s3bucket.bucket} /var/www/html' >> /var/spool/cron/root
EOF
EOT
  }
}

  